package com.zireck.calories.data.entity;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MEAL_ENTITY.
 */
public class MealEntity extends MealEntityBase  {

    private Long id;
    /** Not-null value. */
    private java.util.Date date;
    private int mealtime;
    private int grams;
    private double calories;
    private double fats;
    private double carbohydrates;
    private double proteins;
    private String foodName;
    private Long foodId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MealEntityDao myDao;

    private FoodEntity foodEntity;
    private Long foodEntity__resolvedKey;


    public MealEntity() {
    }

    public MealEntity(Long id) {
        this.id = id;
    }

    public MealEntity(Long id, java.util.Date date, int mealtime, int grams, double calories, double fats, double carbohydrates, double proteins, String foodName, Long foodId) {
        this.id = id;
        this.date = date;
        this.mealtime = mealtime;
        this.grams = grams;
        this.calories = calories;
        this.fats = fats;
        this.carbohydrates = carbohydrates;
        this.proteins = proteins;
        this.foodName = foodName;
        this.foodId = foodId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMealEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public int getMealtime() {
        return mealtime;
    }

    public void setMealtime(int mealtime) {
        this.mealtime = mealtime;
    }

    public int getGrams() {
        return grams;
    }

    public void setGrams(int grams) {
        this.grams = grams;
    }

    public double getCalories() {
        return calories;
    }

    public void setCalories(double calories) {
        this.calories = calories;
    }

    public double getFats() {
        return fats;
    }

    public void setFats(double fats) {
        this.fats = fats;
    }

    public double getCarbohydrates() {
        return carbohydrates;
    }

    public void setCarbohydrates(double carbohydrates) {
        this.carbohydrates = carbohydrates;
    }

    public double getProteins() {
        return proteins;
    }

    public void setProteins(double proteins) {
        this.proteins = proteins;
    }

    public String getFoodName() {
        return foodName;
    }

    public void setFoodName(String foodName) {
        this.foodName = foodName;
    }

    public Long getFoodId() {
        return foodId;
    }

    public void setFoodId(Long foodId) {
        this.foodId = foodId;
    }

    /** To-one relationship, resolved on first access. */
    public FoodEntity getFoodEntity() {
        Long __key = this.foodId;
        if (foodEntity__resolvedKey == null || !foodEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FoodEntityDao targetDao = daoSession.getFoodEntityDao();
            FoodEntity foodEntityNew = targetDao.load(__key);
            synchronized (this) {
                foodEntity = foodEntityNew;
            	foodEntity__resolvedKey = __key;
            }
        }
        return foodEntity;
    }

    public void setFoodEntity(FoodEntity foodEntity) {
        synchronized (this) {
            this.foodEntity = foodEntity;
            foodId = foodEntity == null ? null : foodEntity.getId();
            foodEntity__resolvedKey = foodId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
